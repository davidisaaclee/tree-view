(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var EventTargetMixin, TreeModel, extend,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  EventTargetMixin = require('oo-eventtarget');

  extend = function(obj, fields) {
    var key, result, value;
    result = {};
    for (key in obj) {
      value = obj[key];
      result[key] = value;
    }
    for (key in fields) {
      value = fields[key];
      result[key] = value;
    }
    return result;
  };


  /*
  Represents nested data as an ordered tree structure. Provides support for
  mutation observation. Can be used in conjunction with `TreeTransformer` to
  lazily and automatically transform between different tree representations.
   */

  TreeModel = (function() {

    /*
    Constructs a `TreeModel` with an optional value to hold.
    
    @param [a] value This node's held value.
     */
    function TreeModel(value1) {
      this.value = value1;
      this._bubble = bind(this._bubble, this);
      EventTargetMixin(this);

      /*
      @property [Array] Mapping of keys to this node's children, in the form:
        node: TreeModel
        key: String
       */
      this._children = {};

      /*
      @property [Array<String>] An ordered list of keys for this node's children.
       */
      this.orderedChildrenKeys = [];

      /*
      @property [Array<TreeModel>] An ordered list of this node's children.
       */
      Object.defineProperty(this, 'childList', {
        get: function() {
          return this.orderedChildrenKeys.map((function(_this) {
            return function(key) {
              return _this._children[key].node;
            };
          })(this));
        }
      });
    }


    /*
    @property [TreeModel] This node's parent node, or `null` if root.
     */

    TreeModel.prototype.parent = null;


    /*
    @property [String] The key by which this node's parent refers to this node,
      or `null` if root.
     */

    TreeModel.prototype.key = null;


    /*
    @param [String] key
    @return [TreeModel] The specified child node, or `null` if no such child.
     */

    TreeModel.prototype.getChild = function(key) {
      if (this._children[key] != null) {
        return this._children[key].node;
      } else {
        return null;
      }
    };


    /*
    Returns the index of the specified child, or `null` if no such child.
    
    @param [String] key
    @return [Integer] The index of the child at `key`, or `null` if no such child.
     */

    TreeModel.prototype.getIndexOfChild = function(key) {
      if (this._children[key] != null) {
        return this._children[key].index;
      } else {
        return null;
      }
    };


    /*
    @param [String] key
    @param [TreeModel] node
     */

    TreeModel.prototype.addChild = function(key, node) {
      return this._mutate((function(_this) {
        return function() {
          var index;
          if (key == null) {
            return null;
          }
          _this.removeChild(key);
          node.parent = _this;
          node.key = key;
          node.addEventListener('changed', _this._bubble(key));
          _this.orderedChildrenKeys.push(key);
          index = _this.orderedChildrenKeys.length - 1;
          _this._children[key] = {
            node: node,
            index: index
          };
          return _this._children[key].node;
        };
      })(this));
    };


    /*
    If a child exists at the specified key, replaces the child node at `key` with
      the specified node.
      If no such child exists, adds the node as a child at the specified key.
    
    @param [String] key The child's key.
    @param [TreeModel] node The node to put in the existing child's place.
    @return [TreeModel] The "adopted" child node (`node`)
     */

    TreeModel.prototype.setChild = function(key, node) {
      if (this._children[key] != null) {
        return this._mutate((function(_this) {
          return function() {
            return _this._children[key].node = node;
          };
        })(this));
      } else {
        return this.addChild(key, node);
      }
    };


    /*
    @param [String] key Key of child to be removed.
    @return [TreeModel] The removed child.
     */

    TreeModel.prototype.removeChild = function(key) {
      var toDelete;
      if (this._children[key] != null) {
        toDelete = this._children[key];
        return this._mutate((function(_this) {
          return function() {
            return toDelete.node._mutate(function() {
              var reorderChildren;
              toDelete.node.removeEventListener('changed', _this._bubble(key));
              toDelete.node.parent = null;
              toDelete.node.key = null;
              _this.orderedChildrenKeys.splice(_this._children[key].index, 1);
              delete _this._children[key];
              reorderChildren = function(startIndex) {
                var i, j, ref, ref1, results;
                results = [];
                for (i = j = ref = startIndex, ref1 = _this.orderedChildrenKeys.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
                  results.push(_this._children[_this.orderedChildrenKeys[i]].index = i);
                }
                return results;
              };
              reorderChildren(toDelete.index);
              return toDelete.node;
            });
          };
        })(this));
      }
    };


    /*
    Alias for `removeChild`.
    
    @param [String] key Key of child to be detached.
    @return [TreeModel] The detached child.
     */

    TreeModel.prototype.detach = function() {
      return this.removeChild.apply(this, arguments);
    };


    /*
    Creates a new node and places it at the provided path.
    
    Note: This is a mutating method, but the mutation is delegated to the
    new node's parent via `addChild`.
    
    @param [Array<String>] path The path where the new node should live.
    @param [a] value The value to be placed in the new node.
    @return [TreeModel<a>] The newly-created node, or `null` if invalid path.
     */

    TreeModel.prototype.put = function(arg, value) {
      var j, key, parent, parentPath;
      parentPath = 2 <= arg.length ? slice.call(arg, 0, j = arg.length - 1) : (j = 0, []), key = arg[j++];
      parent = this.navigate(parentPath);
      if ((parent != null) && (key != null)) {
        return parent.addChild(key, new TreeModel(value));
      } else {
        if (key == null) {
          throw new RangeError('Attempted to put value at an undefined key.');
        } else if (parent == null) {
          throw new RangeError('Attempted to put value at invalid path.');
        }
      }
    };


    /*
    Navigates to a node and returns that node if it exists.
    
    @param [Array<String>] path A path to the node, with the node's key as the last element.
    @return [TreeModel] The specified node, or `null` if no such node.
     */

    TreeModel.prototype.navigate = function(path) {
      var hd, ref, tl;
      hd = path[0], tl = 2 <= path.length ? slice.call(path, 1) : [];
      switch (false) {
        case hd == null:
          return (ref = this.getChild(hd)) != null ? ref.navigate(tl) : void 0;
        default:
          return this;
      }
    };


    /*
    Removes all children from this node.
    
    @return [TreeModel] This model.
     */

    TreeModel.prototype.clear = function() {
      return this._mutate((function(_this) {
        return function() {
          _this.orderedChildrenKeys.forEach(function(key) {
            return _this.removeChild(key);
          });
          return _this;
        };
      })(this));
    };


    /*
    Walks the tree depth-first, in order according to each node's `childList`,
      reducing to a single value.
    
    @param [Function<a, b, a>] procedure The reduction procedure, taking
      as parameters the accumulator value, and the current node's value; and
      returning the updated accumulator value.
    @param [a] accumulator The initial accumulator value.
     */

    TreeModel.prototype.reduce = function(procedure, accumulator) {
      this.childList.forEach(function(child) {
        return accumulator = child.reduce(procedure, accumulator);
      });
      return procedure(accumulator, this.value);
    };


    /*
    Perform a lot of mutations to this node or its descendants, only triggering
      a single change event.
    
    @param [Function<TreeModel, ?>] proc
     */

    TreeModel.prototype.batchMutate = function(proc) {
      return this._mutate((function(_this) {
        return function() {
          return proc(_this);
        };
      })(this));
    };


    /*
    Performs a mutation action, sending off changed events.
    
    @param [Function] procedure The action to perform.
    @return [?] The result of procedure.
     */

    TreeModel.prototype._mutate = function(procedure) {
      var r;
      if (!this._isMutating) {
        this._isMutating = true;
        r = procedure();
        this._fireChanged();
        this._isMutating = false;
        return r;
      } else {
        return procedure();
      }
    };


    /*
    Fires a changed event.
    
    @param [TreeModel] node The changed node.
     */

    TreeModel.prototype._fireChanged = function() {
      return this.dispatchEvent('changed', {
        node: this,
        path: []
      });
    };

    TreeModel.prototype._bubble = function(childKey) {
      return (function(_this) {
        return function(evt) {
          var data;
          if (!_this._isMutating) {
            data = extend(evt.data, {
              path: [childKey].concat(slice.call(evt.data.path))
            });
            return _this.dispatchEvent(evt.type, data);
          }
        };
      })(this);
    };

    return TreeModel;

  })();

  module.exports = TreeModel;

}).call(this);

},{"oo-eventtarget":3}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var TreeTransformer, firstMatch,
    slice = [].slice;

  firstMatch = function(l, val, matcher) {
    var i, j, len;
    for (j = 0, len = l.length; j < len; j++) {
      i = l[j];
      if (matcher(i, val)) {
        return i;
      }
    }
    return null;
  };

  TreeTransformer = (function() {

    /*
    Creates an empty `TreeTransformer`.
    
    @param [Function] makeDefaultTree Dependency injection for tree models. Should
      not require use of `new`.
     */
    function TreeTransformer(makeDefaultTree) {
      this.makeDefaultTree = makeDefaultTree;
      this._nodeCases = [];
    }


    /*
    Adds a transform for a node which passes the supplied predicate.
    
    @param [Function<a, TreeModel<a>, Boolean>] predicate
    @param [Function<a, TreeModel<a>, b>] transform
    @param [Function<a, TreeModel<a>>] treeConstructor
     */

    TreeTransformer.prototype.addNodeCase = function(predicate, transform, treeConstructor) {
      var nodeCase;
      if (treeConstructor == null) {
        treeConstructor = this.makeDefaultTree;
      }
      nodeCase = {
        predicate: predicate,
        transform: transform,
        constructor: treeConstructor
      };
      return this._nodeCases.push(nodeCase);
    };


    /*
    Transforms the provided tree model.
    
    @param [TreeModel] model The model to transform.
    @return [TreeModel] The transformed model.
     */

    TreeTransformer.prototype.transform = function(model) {
      var nodeCase, r;
      nodeCase = firstMatch(this._nodeCases, model, function(arg) {
        var predicate;
        predicate = arg.predicate;
        return predicate(model.value, model);
      });
      if (nodeCase != null) {
        r = nodeCase.constructor(nodeCase.transform(model.value, model));
        model.orderedChildrenKeys.forEach((function(_this) {
          return function(key) {
            var child, transformedChild;
            child = model.getChild(key);
            transformedChild = _this.transform(child);
            if (transformedChild != null) {
              return r.addChild(key, transformedChild);
            }
          };
        })(this));
        return r;
      } else {
        console.warn('No case matching node ', model);
        return null;
      }
    };


    /*
    Watches the provided tree model, calling the provided function when a
    transform occurs.
    
    @param [TreeModel] model The model to be watched and transformed.
    @param [Function<TreeModel, TreeModel, a>] onTransform Function which will be
      called when the model is transformed, providing the transformed and
      untransformed models as parameters.
    @param [Boolean] lazy `true` if this should only update changed branches.
    @param [Boolean] transformNow `true` if this method should immediately perform
      a transform upon being called; else, wait for the first modification.
    @return [Function] An unsubscribe function.
     */

    TreeTransformer.prototype.watch = function(model, onTransform, lazy, transformNow) {
      var cb, mostRecentResult;
      if (lazy == null) {
        lazy = true;
      }
      if (transformNow == null) {
        transformNow = true;
      }
      switch (lazy) {
        case false:
          cb = (function(_this) {
            return function() {
              return onTransform(_this.transform(model), model);
            };
          })(this);
          model.addEventListener('changed', cb);
          if (transformNow) {
            cb();
          }
          return function() {
            return model.removeEventListener('changed', cb);
          };
        case true:
          mostRecentResult = this.transform(model);
          cb = (function(_this) {
            return function(arg) {
              var branch, j, key, node, parentPath, path, ref;
              ref = arg.data, node = ref.node, path = ref.path;
              if (path.length === 0) {
                mostRecentResult = _this.transform(model);
              } else {
                branch = _this.transform(node);
                parentPath = 2 <= path.length ? slice.call(path, 0, j = path.length - 1) : (j = 0, []), key = path[j++];
                mostRecentResult.navigate(parentPath).setChild(key, branch);
              }
              return onTransform(mostRecentResult);
            };
          })(this);
          model.addEventListener('changed', cb);
          if (transformNow) {
            onTransform(mostRecentResult, model);
          }
          return function() {
            return model.removeEventListener('changed', cb);
          };
      }
    };

    return TreeTransformer;

  })();

  module.exports = TreeTransformer;

}).call(this);

},{}],3:[function(require,module,exports){
module.exports = require("./lib/$EventTarget.js");
},{"./lib/$EventTarget.js":4}],4:[function(require,module,exports){
/**
	$EventTarget mixin
	@author Bart Van Beurden
	@date 26/01/2014
**/

/**
	Events dispatched by $EventTarget have 3 properties:
	- type (string)
	- target (event source)
	- data (user-provided)
**/
var Event = function(type, target, data) {
	this.type = type;
	this.target = target;
	this.data = data;
};

/**
	$EventTarget mixin
	Extends an object with EventTarget methods
	(adds #addEventListener, #removeEventListener, #dispatchEvent)
	@param obj The object to extend
**/
module.exports = function(obj) {

	obj._listeners = {};
	var proto = Object.getPrototypeOf(obj);
	
	// if necessary, extend prototype
	if (!proto.addEventListener) {
	
		/**
			$EventTarget#addEventListener
			@param type The event Type to listen to
			@param callback(event) The listener function
			@returns this
		**/
		Object.defineProperty(proto, "addEventListener", { value: function(type, callback) {
			console.assert(typeof type == "string", "$EventTarget#addEventListener - type must be string");
			console.assert(typeof callback == "function", "$EventTarget#addEventListener - callback must be function");
			
			var listeners = this._listeners[type];
			if (!listeners) listeners = this._listeners[type] = [];
			listeners.push(callback);
			return this;
		}});
		
		/**
			$EventTarget#removeEventListener
			@param type The event Type to remove
			@param callback(event) The listener function to remove
			@returns this
		**/
		Object.defineProperty(proto, "removeEventListener", { value: function(type, callback) {
			console.assert(typeof type == "string", "$EventTarget#removeEventListener - type must be string");
			console.assert(typeof callback == "function", "$EventTarget#removeEventListener - callback must be function");
			
			var listeners = this._listeners[type];
			if (listeners) {
				var index = listeners.indexOf(callback);
				if (index != -1) {
					listeners.splice(index, 1);
					if (listeners.length == 0) delete this._listeners[type];
				}
			}
			return this;
		}});
		
		Object.defineProperty(proto, "clearEventListeners", { value: function(type) {
			
			if (arguments.length == 0) {
				this._listeners = {};
			} else {
				delete this._listeners[type];
			}
			return this;
		}});
		
		var dispatcher = function(event) { 
			return function(callback) { 
				callback(event);
			};
		};
		
		/**
			$EventTarget#dispatchEvent
			@param type The type of the event to dispatch
			@param data [Optional] The data to pass to the listeners
		**/
		Object.defineProperty(proto, "dispatchEvent", { value: function(type, data) {
			console.assert(typeof type == "string", "$EventTarget#dispatchEvent - type must be string");
			
			(this._listeners[type] || []).forEach(dispatcher(new Event(type, this, data)));
		}});
	};
	
	return obj;

};
},{}],5:[function(require,module,exports){
var TreeModel, TreeTransformer, makeBElement, makeDemoElement, nodeCount, rawModel, transformer, treeView;

TreeModel = require('TreeModel');

TreeTransformer = require('TreeTransformer');

makeDemoElement = function() {
  return new DemoElement();
};

makeBElement = function(model) {
  return function() {
    var button, content, elt;
    elt = document.createElement('span');
    elt.innerText = 'spanner';
    elt.classList.add('b');
    button = document.createElement('button');
    button.innerText = 'Add';
    elt.appendChild(button);
    button.addEventListener('click', function() {
      return model.put(["__reservedkey" + model.childList.length + "__"], {
        type: 'a'
      });
    });
    content = document.createElement('span');
    content.classList.add('children');
    content.classList.add('b-children');
    elt.appendChild(content);
    return elt;
  };
};

treeView = document.querySelector('#tree-view');

rawModel = new TreeModel({
  type: 'a'
});

transformer = new TreeTransformer(function(val) {
  return new TreeModel(val);
});

nodeCount = 0;

transformer.addNodeCase(function(val, model) {
  return val.type === 'a';
}, function(val, model) {
  return makeDemoElement;
}, function(val) {
  var r;
  r = new TreeModel(val);
  r.nodeKind = "a" + (nodeCount++);
  return r;
});

transformer.addNodeCase(function(val, model) {
  return val.type === 'b';
}, function(val, model) {
  return makeBElement(model);
}, function(val) {
  var r;
  r = new TreeModel(val);
  r.nodeKind = "b" + (nodeCount++);
  return r;
});

transformer.watch(rawModel, function(transformed, original) {
  return treeView.update(transformed);
});

rawModel.batchMutate(function(model) {
  model.put(['a'], {
    type: 'a'
  });
  model.put(['b'], {
    type: 'b'
  });
  model.put(['a', 'b1'], {
    type: 'b'
  });
  model.put(['a', 'a1'], {
    type: 'a'
  });
  model.put(['a', 'b2'], {
    type: 'b'
  });
  return model.put(['a', 'a2'], {
    type: 'a'
  });
});


},{"TreeModel":1,"TreeTransformer":2}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
